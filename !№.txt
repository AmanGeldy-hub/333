import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.DEBUG)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "7558730596:AAEzrvH5wqBmgSLWd2zYtjnfN2OvXufFxRQ"
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
SECRET_CODE = "123"

# –®–∞–±–ª–æ–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤ —É—Ä–æ–∫–æ–≤
LESSON_TEXT_TEMPLATE = {
    1: "–£—Ä–æ–∫ 1: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞\n\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    2: "–£—Ä–æ–∫ 2: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞\n\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    3: "–£—Ä–æ–∫ 3: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞\n\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    4: "–£—Ä–æ–∫ 4: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞\n\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    5: "–£—Ä–æ–∫ 5: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞\n\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
}

# –®–∞–±–ª–æ–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤ –±–ª–æ–∫–æ–≤
BLOCK_TEXT_TEMPLATE = {
    (1, 1): "–£—Ä–æ–∫ 1/1: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞\n\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    (1, 2): "–£—Ä–æ–∫ 1/2: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞\n\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    (1, 3): "–£—Ä–æ–∫ 1/3: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞\n\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    (1, 4): "–£—Ä–æ–∫ 1/4: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞\n\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    (1, 5): "–£—Ä–æ–∫ 1/5: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞\n\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    (2, 1): "–£—Ä–æ–∫ 2/1: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞\n\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏...
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Ä–æ–∫–∞–º.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@dp.message()
async def secret_code_handler(message: types.Message):
    if message.text == SECRET_CODE:
        # –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ üìö"
        main_menu = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ üìö")]],
            resize_keyboard=True
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —É—Ä–æ–∫–æ–≤
        lesson_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"–£—Ä–æ–∫ {i}: –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞", callback_data=f"lesson_{i}")]
                for i in range(1, 6)
            ]
        )
        await message.answer("–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤–µ—Ä–Ω–æ! –í–æ—Ç —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤:", reply_markup=main_menu)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=lesson_keyboard)
    elif message.text == "–°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ üìö":
        # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤
        lesson_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"–£—Ä–æ–∫ {i}: –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞", callback_data=f"lesson_{i}")]
                for i in range(1, 6)
            ]
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=lesson_keyboard)
    else:
        await message.answer("–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Ä–æ–∫–æ–≤ –∏ –±–ª–æ–∫–æ–≤
@dp.callback_query()
async def lesson_and_block_handler(callback: types.CallbackQuery):
    data = callback.data
    if data.startswith("lesson_") and "_" not in data[7:]:
        lesson_number = int(data.split("_")[1])
        lesson_text = LESSON_TEXT_TEMPLATE[lesson_number]
        block_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"–£—Ä–æ–∫ {lesson_number}/{i}: –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞", callback_data=f"block_{lesson_number}_{i}")]
                for i in range(1, 6)
            ] + [[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_lessons")]]
        )
        await callback.message.answer(lesson_text, reply_markup=block_keyboard)
    elif "block" in data:
        lesson_number, block_number = map(int, data.split("_")[1:])
        block_text = BLOCK_TEXT_TEMPLATE.get((lesson_number, block_number), "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        block_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"lesson_{lesson_number}")]]
        )
        await callback.message.answer(block_text, reply_markup=block_keyboard)
    elif data == "back_to_lessons":
        lesson_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"–£—Ä–æ–∫ {i}: –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞", callback_data=f"lesson_{i}")]
                for i in range(1, 6)
            ]
        )
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=lesson_keyboard)
    await callback.answer()

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
