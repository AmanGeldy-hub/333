import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# === –°–û–°–¢–û–Ø–ù–ò–Ø FSM === #
class Form(StatesGroup):
    waiting_for_code = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    choosing_block = State()  # –í—ã–±–æ—Ä –±–ª–æ–∫–∞
    choosing_course = State()  # –í—ã–±–æ—Ä –∫—É—Ä—Å–∞
    viewing_course = State()  # –ü—Ä–æ—Å–º–æ—Ç—Ä –∫—É—Ä—Å–∞
# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = "7558730596:AAGE6wMl2w0MJys_uf5qrEgy8UDCjtO62dc"

# üìå ID –≥—Ä—É–ø–ø—ã, –æ—Ç–∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
GROUP_ID = -1002416234517

# üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# üîë –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
SECRET_CODE = "123"

# üìö –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–ª–æ–∫–æ–≤ –∏ –∫—É—Ä—Å–æ–≤
blocks = {
    "–ü–æ–¥–±–æ—Ä": {
        "–ü—Ä–æ—Ñ–∏–ª—å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏": 32,
        "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –∏ –æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤": 33,
        "–û–±–∑–≤–æ–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é": 34,
        "–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ, —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞": 35
    },
    "–û–±—É—á–µ–Ω–∏–µ": {
        "–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞": [24, 45, 46, 47],
        "–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –ø–æ ¬´–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏—ë–º–∫–µ¬ª": 25,
        "–ü–µ—Ä–µ–∫–ª–µ–π–∫–∞ —Ü–µ–Ω–Ω–∏–∫–æ–≤": 27,
        "–ö–∞—Å—Å–æ–≤–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞": 28,
        "–ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏": 29,
        "–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –≤—ã–ø–µ—á–∫–∏ –∏–∑ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö –ü–§ –∏ —Ñ—Ä—ç–Ω—á-–¥–æ–≥–æ–≤": [30, 48, 49],
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–Ω—è—Ç–∏—é —Å –æ—Ö—Ä–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã": 31
    },
    "–£—á–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∞": {
        "–î–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞": 38,
        "–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∫–Ω–∏–∂–∫–∏": 39,
        "–ö–∞–¥—Ä–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç": 40
    }
}

# üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

def main_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìå –ü–æ–¥–±–æ—Ä")],
            [KeyboardButton(text="üìö –û–±—É—á–µ–Ω–∏–µ")],
            [KeyboardButton(text="üìù –£—á–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard

# üéì –ú–µ–Ω—é –∫—É—Ä—Å–æ–≤
def course_menu(selected_block):
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=course)] for course in blocks[selected_block]] + 
                 [[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")], [KeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–ª–æ–∫–∞–º")]],
        resize_keyboard=True,
    )
@dp.message(F.text == "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–ª–æ–∫–∞–º")
async def go_to_blocks(message: types.Message, state: FSMContext):
    await state.set_state(Form.choosing_block)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫:", reply_markup=main_menu())

# üìñ –û–ø—Ü–∏–∏ –∫—É—Ä—Å–∞
def course_options():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìö –ö—É—Ä—Å"), KeyboardButton(text="üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    return keyboard

# ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.set_state(Form.waiting_for_code)
    await message.answer("–ü—Ä–∏–≤–µ—Ç!–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æüîë:")

# üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@dp.message(Form.waiting_for_code)
async def check_code(message: types.Message, state: FSMContext):
    if message.text.strip() == SECRET_CODE:
        await state.set_state(Form.choosing_block)
        await message.answer("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫:", reply_markup=main_menu())
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# üìå –í—ã–±–æ—Ä –±–ª–æ–∫–∞
@dp.message(Form.choosing_block)
async def choose_block(message: types.Message, state: FSMContext):
    text = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    selected_block = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞

    # üîç –ò—â–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–º—É –∏–∑ –±–ª–æ–∫–æ–≤
    for key in blocks.keys():
        if key in text:  
            selected_block = key  
            break

    # üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"üîπ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {repr(text)}")  
    print(f"üîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–ª–æ–∫–∏: {list(blocks.keys())}")  
    print(f"üìå –í—ã–±—Ä–∞–Ω–Ω—ã–π –±–ª–æ–∫: {selected_block}")  

    if selected_block:  # –ï—Å–ª–∏ –±–ª–æ–∫ –Ω–∞–π–¥–µ–Ω
        await state.update_data(selected_block=selected_block)  
        await state.set_state(Form.choosing_course)  
        await message.answer(f"üìö –í—ã –≤—ã–±—Ä–∞–ª–∏ '{selected_block}'. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=course_menu(selected_block))
    else:
        print("‚ùå –û—à–∏–±–∫–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞.")  
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤.")
# üìö –í—ã–±–æ—Ä –∫—É—Ä—Å–∞
@dp.message(Form.choosing_course)
async def choose_course(message: types.Message, state: FSMContext):
    data = await state.get_data()
    selected_block = data.get("selected_block")
    print(f"üîπ –í—ã–±—Ä–∞–Ω–Ω—ã–π –±–ª–æ–∫: {selected_block}")
    print(f"üîπ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∫—É—Ä—Å: {message.text}")
    print(f"üîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã: {list(blocks[selected_block].keys()) if selected_block else 'None'}")	
    if selected_block and message.text in blocks[selected_block]:
        await state.update_data(selected_course=message.text)
        await state.set_state(Form.viewing_course)  # ‚úÖ –ù–æ–≤—ã–π state
        await message.answer(f"üìñ –ö—É—Ä—Å '{message.text}'. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=course_options())
    else:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")

# üìñ –û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞ (–ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è)
@dp.message(Form.viewing_course, F.text == "üìö –ö—É—Ä—Å")
async def send_description(message: types.Message, state: FSMContext):
    data = await state.get_data()
    selected_block = data.get("selected_block")
    selected_course = data.get("selected_course")

    if selected_block and selected_course:
        course_ids = blocks[selected_block][selected_course]

        if isinstance(course_ids, list):  # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ID ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ
            for course_id in course_ids:
                await bot.forward_message(chat_id=message.chat.id, from_chat_id=GROUP_ID, message_id=course_id)
        else:  # –ï—Å–ª–∏ –æ–¥–∏–Ω ID ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å
            await bot.forward_message(chat_id=message.chat.id, from_chat_id=GROUP_ID, message_id=course_ids)
    else:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å.")


@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message, state: FSMContext):
    print(f"üîô –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message.text}'")  

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data = await state.get_data()
    current_state = await state.get_state()  
    print(f"üîô –ù–∞–∑–∞–¥ –Ω–∞–∂–∞—Ç–∞! –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}, –¥–∞–Ω–Ω—ã–µ: {data}")  

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ None
    current_state = current_state or ""

    if current_state == Form.viewing_course.state:
        print("üìö –ü–µ—Ä–µ—Ö–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞")  
        
        await state.set_state(Form.choosing_course)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        new_state = await state.get_state()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–∏–ª–æ—Å—å –ª–∏
        print(f"‚úÖ –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ù–∞–∑–∞–¥: {new_state}")  

        selected_block = data.get("selected_block")
        if selected_block:
            print(f"üìö –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –±–ª–æ–∫ '{selected_block}'")
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=course_menu(selected_block))
        else:
            print("‚ùå –û—à–∏–±–∫–∞! –ù–µ –Ω–∞–π–¥–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±–ª–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            await state.set_state(Form.choosing_block)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫:", reply_markup=main_menu())

    elif current_state == Form.choosing_course.state:
        print("üìå –ü–µ—Ä–µ—Ö–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ –∫ –≤—ã–±–æ—Ä—É –±–ª–æ–∫–∞")  
        await state.set_state(Form.choosing_block)
        new_state = await state.get_state()
        print(f"‚úÖ –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ù–∞–∑–∞–¥: {new_state}")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫:", reply_markup=main_menu())

    elif current_state == Form.choosing_block.state or current_state == "":
        print("üè† –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")  
        await state.set_state(Form.main_menu)
        new_state = await state.get_state()
        print(f"‚úÖ –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ù–∞–∑–∞–¥: {new_state}")
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ '{current_state}', —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ –≤—ã–±–æ—Ä –±–ª–æ–∫–∞.")  
        await state.set_state(Form.choosing_block)
        new_state = await state.get_state()
        print(f"‚úÖ –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ù–∞–∑–∞–¥: {new_state}")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫:", reply_markup=main_menu())


# ü§∑‚Äç‚ôÇÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def unknown_message(message: types.Message):
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await bot.delete_webhook(drop_pending_updates=True)  
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)  

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
dp.message.register(start, Command("start"))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
dp.message.register(check_code, Form.waiting_for_code)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
dp.message.register(choose_block, Form.choosing_block, F.text.in_(blocks.keys()))  # –í—ã–±–æ—Ä –±–ª–æ–∫–∞
dp.message.register(go_back, F.text == "üîô –ù–∞–∑–∞–¥")  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
dp.message.register(go_to_blocks, F.text == "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–ª–æ–∫–∞–º")  # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –±–ª–æ–∫–∞–º
dp.message.register(choose_course, Form.choosing_block, F.text.func(lambda text: any(text in courses for courses in blocks.values())))  # –í—ã–±–æ—Ä –∫—É—Ä—Å–∞
dp.message.register(send_description, F.text == "üìñ –ö—É—Ä—Å")  # –û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞
dp.message.register(unknown_message)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

if __name__ == "__main__":
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞



