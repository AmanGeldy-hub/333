import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# === –°–û–°–¢–û–Ø–ù–ò–Ø FSM === #
class Form(StatesGroup):
    waiting_for_code = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    choosing_block = State()  # –í—ã–±–æ—Ä –±–ª–æ–∫–∞
    choosing_course = State()  # –í—ã–±–æ—Ä –∫—É—Ä—Å–∞
    viewing_course = State()  # –ü—Ä–æ—Å–º–æ—Ç—Ä –∫—É—Ä—Å–∞
    taking_test = State()  # –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞

# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = "7558730596:AAGE6wMl2w0MJys_uf5qrEgy8UDCjtO62dc"

# üìå ID –≥—Ä—É–ø–ø—ã, –æ—Ç–∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
GROUP_ID = -1002416234517

# üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# üîë –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
SECRET_CODE = "123"

# üìö –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–ª–æ–∫–æ–≤ –∏ –∫—É—Ä—Å–æ–≤
blocks = {
    "üìå –ü–æ–¥–±–æ—Ä": {
        "–ü—Ä–æ—Ñ–∏–ª—å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏": 32,
        "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –∏ –æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤": 33,
        "–û–±–∑–≤–æ–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é": 34,
        "–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ, —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞": 35
    },
    "üìö –û–±—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º": {  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
        "–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞": [24, 45, 46, 47],
        "–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –ø–æ ¬´–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏—ë–º–∫–µ¬ª": [59, 60, 61, 62, 63],
        "–ü–µ—Ä–µ–∫–ª–µ–π–∫–∞ —Ü–µ–Ω–Ω–∏–∫–æ–≤": [27, 79, 80, 81, 82, 83, 84],
        "–ö–∞—Å—Å–æ–≤–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞": [28, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73],
        "–ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏": [29, 74, 75, 76, 77, 78],
        "–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –≤—ã–ø–µ—á–∫–∏ –∏–∑ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö –ü–§ –∏ —Ñ—Ä–µ–Ω—á-–¥–æ–≥–æ–≤": [30, 48, 49],
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–Ω—è—Ç–∏—é —Å –æ—Ö—Ä–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã": 31
    },
    "üìù –£—á–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∞": {
        "–î–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞": 38,
        "–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∫–Ω–∏–∂–∫–∏": 39,
        "–ö–∞–¥—Ä–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç": 40
    }
}
# üìã –¢–µ—Å—Ç—ã
TESTS = {
     "–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞": [
        ("–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞?\n\nA. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–∫–µ\nB. –ü—Ä–∏–µ–º–∫–∞ —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–≤–µ—Ä–∏—è –∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É\nC. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –º–µ—Å—Ç–µ –ø–æ—Å—Ç–∞–≤–∫–∏", "B"),
        ("–í —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ Daily –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç –ø–æ –ø–æ—Å—Ç–∞–≤–∫–µ –≤ —Å–ª—É—á–∞–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è?\n\nA. 12 —á–∞—Å–æ–≤\nB. 24 —á–∞—Å–∞\nC. 48 —á–∞—Å–æ–≤", "B"),
        ("–ö–∞–∫–æ–π –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –ø–æ –ø–æ—Å—Ç–∞–≤–∫–µ?\n\nA. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ 80%\nB. –ë—Ä–∞–∫, –Ω–µ–¥–æ–ø–æ—Å—Ç–∞–≤–∫–∞\nC. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∑–∞–∫–∞–∑—É", "C"),
        ("–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∫–ª–∞–¥–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤–∏–¥–∏—Ç –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è?\n\nA. ¬´–í —Ä–∞–±–æ—Ç–µ¬ª\nB. ¬´–ù–æ–≤—ã–µ¬ª\nC. ¬´–í—Å–µ –∑–∞–¥–∞–Ω–∏—è¬ª", "B"),
        ("–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã–±—Ä–∞–ª –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∏—ë–º–∫—É?\n\nA. –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ\nB. –ù–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–∞–ª–∏–≤–∞–µ—Ç—Å—è –≤ –Ω–µ–≥–æ\nC. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Ä–∞–∑–¥–µ–ª ¬´–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ¬ª", "B")
    ],
    "–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –ø–æ ¬´–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏—ë–º–∫–µ¬ª": [
        ("–î–ª—è —á–µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º?\n\nA. –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É –∏ —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç\nB. –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Å—Ç–∞–≤–æ–∫\nC. –ß—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∏ –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã –¥–ª—è –µ–µ —Ä–µ—à–µ–Ω–∏—è", "C"),
        ("–ß—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞?\n\nA. –£—Å–∫–æ—Ä–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞\nB. –ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç–µ—Ä–∏ –∏ –±—ã—Å—Ç—Ä–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –æ—à–∏–±–∫–∏\nC. –ò–∑–±–µ–∂–∞—Ç—å –ø—Ä–∏–µ–º–∫–∏ —Ç–æ–≤–∞—Ä–∞", "B"),
        ("–ö–∞–∫–∞—è –∏–∑ —Å–∏—Ç—É–∞—Ü–∏–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ø—Ä–∏—á–∏–Ω–µ ¬´–ù–µ–¥–æ–ø–æ—Å—Ç–∞–≤–∫–∞¬ª?\n\nA. –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–∞, —á–µ–º —É–∫–∞–∑–∞–Ω–æ –≤ –∑–∞–∫–∞–∑–µ\nB. –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤ –∑–∞–∫–∞–∑–µ\nC. –¢–æ–≤–∞—Ä –∏–º–µ–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è", "B"),
        ("–ö–∞–∫–∞—è –ø—Ä–∏—á–∏–Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–ª–µ–¥—É—é—â–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é: ¬´–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∞–≤–∫–µ, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –≤–º–µ—Å—Ç–æ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏–≤–µ–∑–µ–Ω—ã –¥—Ä—É–≥–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã¬ª?\n\nA. –ù–µ–¥–æ–ø–æ—Å—Ç–∞–≤–∫–∞\nB. –ü–µ—Ä–µ—Å–æ—Ä—Ç\nC. –ò–∑–ª–∏—à–∫–∏", "B"),
        ("–ß—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞?\n\nA. –ù–∞–∂–∞—Ç—å –Ω–∞ –∑–Ω–∞—á–æ–∫ ¬´–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å¬ª\nB. –ü—Ä–æ—Å—Ç–∞–≤–∏—Ç—å –≥–∞–ª–æ—á–∫—É —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø—Ä–∏—á–∏–Ω—ã –∏ –Ω–∞–∂–∞—Ç—å ¬´–í—ã–±—Ä–∞—Ç—å¬ª\nC. –í–≤–µ—Å—Ç–∏ –ø—Ä–∏—á–∏–Ω—É –≤—Ä—É—á–Ω—É—é", "B")
    ],
    "–ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏": [
        ("–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è?\n\nA. –ü—Ä–æ—Ü–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω\nB. –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É—á–µ—Ç–∞ –Ω–∞–ª–∏—á–∏—è, —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–æ–≤–∞—Ä–Ω–æ-–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π\nC. –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º", "B"),
        ("–ö–∞–∫–æ–≤–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏?\n\nA. –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –∑–∞–ø–∞—Å–æ–≤\nB. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\nC. –°–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞–Ω–Ω—ã–º–∏ —É—á–µ—Ç–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤", "C"),
        ("–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –≥–æ–¥ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è?\n\nA. –î–≤–∞ —Ä–∞–∑–∞ –≤ –≥–æ–¥\nB. –û–¥–∏–Ω —Ä–∞–∑ –≤ –≥–æ–¥\nC. –ß–µ—Ç—ã—Ä–µ —Ä–∞–∑–∞ –≤ –≥–æ–¥", "C"),
        ("–ö–∞–∫–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π?\n\nA. –ß–∞—Å—Ç–∏—á–Ω–∞—è\nB. –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è\nC. –í–Ω–µ–ø–ª–∞–Ω–æ–≤–∞—è", "B"),
        ("–ß–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ø–ª–∞–Ω–æ–≤–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è?\n\nA. –ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—á–∏\nB. –ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤ –∑–∞—Ä–∞–Ω–µ–µ –Ω–∞–º–µ—á–µ–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏ –ø–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–º—É –ø–ª–∞–Ω—É-–≥—Ä–∞—Ñ–∏–∫—É\nC. –ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", "B")
    ],
    "–ü–µ—Ä–µ–∫–ª–µ–π–∫–∞ —Ü–µ–Ω–Ω–∏–∫–æ–≤": [
    ("–ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–ª–µ–¥—É–µ—Ç –≤—ã–±—Ä–∞—Ç—å, —á—Ç–æ–±—ã —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å —Ü–µ–Ω–Ω–∏–∫–∏ –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω–æ?\n\nA) ¬´–†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –≤—Å–µ —Ü–µ–Ω–Ω–∏–∫–∏¬ª\nB) ¬´–†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å —Ü–µ–Ω–Ω–∏–∫–∏¬ª\nC) ¬´–†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–µ–Ω–Ω–∏–∫–∏¬ª", "B"),
    ("–ß—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –µ—Å–ª–∏ –æ–Ω –ø–æ–≤—Ä–µ–¥–∏–ª —Ä–∞–Ω–µ–µ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–Ω–Ω—ã–π —Ü–µ–Ω–Ω–∏–∫?\n\nA) –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª ¬´–ì–æ—Ç–æ–≤—ã–µ¬ª\nB) –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –Ω–∞ –ø–µ—á–∞—Ç—å\nC) –°–æ–æ–±—â–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é", "A"),
    ("–ß—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–µ–ª–∞–µ—Ç –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏?\n\nA) –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –±–µ–∑ –ø–µ—á–∞—Ç–∏\nB) –†–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –µ–º—É —Ü–µ–Ω–Ω–∏–∫\nC) –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—á–∞—Ç–∏ –≤—Å–µ—Ö —Ü–µ–Ω–Ω–∏–∫–æ–≤", "C")
]
}

# üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìå –ü–æ–¥–±–æ—Ä")],
            [KeyboardButton(text="üìö –û–±—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º")],  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
            [KeyboardButton(text="üìù –£—á–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard


# üéì –ú–µ–Ω—é –∫—É—Ä—Å–æ–≤
def course_menu(selected_block):
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=course)] for course in blocks[selected_block]] + 
                 [[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")], [KeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–ª–æ–∫–∞–º")]],
        resize_keyboard=True,
    )
@dp.message(F.text == "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–ª–æ–∫–∞–º")
async def go_to_blocks(message: types.Message, state: FSMContext):
    await state.set_state(Form.choosing_block)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫:", reply_markup=main_menu())

# üìñ –û–ø—Ü–∏–∏ –∫—É—Ä—Å–∞
def course_options():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìö –ö—É—Ä—Å"), KeyboardButton(text="üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    return keyboard

# üìù –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(Form.viewing_course, F.text == "üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def start_test(message: types.Message, state: FSMContext):
    data = await state.get_data()
    selected_course = data.get("selected_course")  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å
    
    if selected_course in TESTS:
        await state.update_data(course_name=selected_course, correct_answers=0, current_question=0)
        await state.set_state(Form.taking_test)
        await send_test_question(message, state)
    else:
        await message.answer("‚ùå –î–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–µ—Ç —Ç–µ—Å—Ç–∞.")

# üìå –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async def send_test_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    course_name = data.get("course_name")
    
    if course_name not in TESTS:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    questions = TESTS[course_name]
    current_question = data.get("current_question", 0)

    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ (–≤–æ–ø—Ä–æ—Å –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç)
    question_text, correct_answer = questions[current_question]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–∏—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "A.", "B.", "C.")
    options = [line for line in question_text.split("\n") if line.startswith(("A.", "B.", "C."))]

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=option)] for option in options],
        resize_keyboard=True
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    await message.answer(question_text, reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç
    await state.update_data(current_question=current_question, correct_answer=correct_answer)
	

# üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
@dp.message(Form.taking_test)
async def handle_test_answer(message: types.Message, state: FSMContext):
    await process_answer(message, state)

# ‚úÖ –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
async def process_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    course_name = data.get("course_name")
    
    if not course_name or course_name not in TESTS:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    questions = TESTS[course_name]
    correct_answers = data.get("correct_answers", 0)
    current_question = data.get("current_question", 0)

    selected_answer = message.text.strip()
    selected_letter = selected_answer.split(".")[0]  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—É A, B –∏–ª–∏ C

    question_text, correct_answer = questions[current_question]

    print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {selected_answer} -> {selected_letter}, –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: {correct_answer}")

    if selected_letter == correct_answer:
        correct_answers += 1
        print("‚úÖ –û—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π!")

    current_question += 1
    await state.update_data(correct_answers=correct_answers, current_question=current_question)

    if current_question < len(questions):
        await send_test_question(message, state)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    else:
 # ‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
        result_text = f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! \n–í—ã –Ω–∞–±—Ä–∞–ª–∏ {correct_answers} –∏–∑ {len(questions)} –±–∞–ª–ª–æ–≤."
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å–∞–º")]],
            resize_keyboard=True
        )
        await message.answer(result_text, reply_markup=keyboard)

# ‚¨áÔ∏è –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–ª–æ–∫ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≤—ã–±–æ—Ä –±–ª–æ–∫–∞
        await state.update_data(selected_block=None)
        await state.set_state(Form.choosing_block)


# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å–∞–º"
@dp.message(F.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å–∞–º")  
async def return_to_courses(message: types.Message, state: FSMContext):
    print("üîÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å–∞–º' —Å—Ä–∞–±–æ—Ç–∞–ª!")  # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≤—ã–±–æ—Ä –±–ª–æ–∫–∞
    await state.update_data(selected_block=None)  
    await state.set_state(Form.choosing_block)  

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìö –ü–æ–¥–±–æ—Ä"), KeyboardButton(text="üéì –û–±—É—á–µ–Ω–∏–µ")],
            [KeyboardButton(text="üìã –£—á–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer("üîô –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—É—á–∞—é—â–∏–π –±–ª–æ–∫:", reply_markup=keyboard)


# ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.set_state(Form.waiting_for_code)
    await message.answer("–ü—Ä–∏–≤–µ—Ç!–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æüîë:")

# üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@dp.message(Form.waiting_for_code)
async def check_code(message: types.Message, state: FSMContext):
    if message.text.strip() == SECRET_CODE:
        await state.set_state(Form.choosing_block)
        await message.answer("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫:", reply_markup=main_menu())
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# üìå –í—ã–±–æ—Ä –±–ª–æ–∫–∞
@dp.message(Form.choosing_block)
async def choose_block(message: types.Message, state: FSMContext):
    text = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    selected_block = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞

    # üîç –ò—â–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–º—É –∏–∑ –±–ª–æ–∫–æ–≤
    for key in blocks.keys():
        if key in text:  
            selected_block = key  
            break

    # üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"üîπ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {repr(text)}")  
    print(f"üîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–ª–æ–∫–∏: {list(blocks.keys())}")  
    print(f"üìå –í—ã–±—Ä–∞–Ω–Ω—ã–π –±–ª–æ–∫: {selected_block}")  

    if selected_block:  # –ï—Å–ª–∏ –±–ª–æ–∫ –Ω–∞–π–¥–µ–Ω
        await state.update_data(selected_block=selected_block)  
        await state.set_state(Form.choosing_course)  
        await message.answer(f"üìö –í—ã –≤—ã–±—Ä–∞–ª–∏ '{selected_block}'. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=course_menu(selected_block))
    else:
        print("‚ùå –û—à–∏–±–∫–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞.")  
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤.")
# üìö –í—ã–±–æ—Ä –∫—É—Ä—Å–∞
@dp.message(Form.choosing_course)
async def choose_course(message: types.Message, state: FSMContext):
    data = await state.get_data()
    selected_block = data.get("selected_block")
    print(f"üîπ –í—ã–±—Ä–∞–Ω–Ω—ã–π –±–ª–æ–∫: {selected_block}")
    print(f"üîπ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∫—É—Ä—Å: {message.text}")
    print(f"üîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã: {list(blocks[selected_block].keys()) if selected_block else 'None'}")	
    if selected_block and message.text in blocks[selected_block]:
        await state.update_data(selected_course=message.text)
        await state.set_state(Form.viewing_course)  # ‚úÖ –ù–æ–≤—ã–π state
        await message.answer(f"üìñ –ö—É—Ä—Å '{message.text}'. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=course_options())
    else:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")

# üìñ –û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞ (–ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è)
@dp.message(Form.viewing_course, F.text == "üìö –ö—É—Ä—Å")
async def send_description(message: types.Message, state: FSMContext):
    data = await state.get_data()
    selected_block = data.get("selected_block")
    selected_course = data.get("selected_course")

    if selected_block and selected_course:
        course_ids = blocks[selected_block][selected_course]

        if isinstance(course_ids, list):  # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ID ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ
            for course_id in course_ids:
                await bot.forward_message(chat_id=message.chat.id, from_chat_id=GROUP_ID, message_id=course_id)
        else:  # –ï—Å–ª–∏ –æ–¥–∏–Ω ID ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å
            await bot.forward_message(chat_id=message.chat.id, from_chat_id=GROUP_ID, message_id=course_ids)
    else:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å.")

#üîô –ù–∞–∑–∞–¥
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message, state: FSMContext):
    print(f"üîô –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message.text}'")  

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data = await state.get_data()
    current_state = await state.get_state()  
    print(f"üîô –ù–∞–∑–∞–¥ –Ω–∞–∂–∞—Ç–∞! –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}, –¥–∞–Ω–Ω—ã–µ: {data}")  

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ None
    current_state = current_state or ""

    if current_state == Form.viewing_course.state:
        print("üìö –ü–µ—Ä–µ—Ö–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞")  
        
        await state.set_state(Form.choosing_course)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        new_state = await state.get_state()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–∏–ª–æ—Å—å –ª–∏
        print(f"‚úÖ –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ù–∞–∑–∞–¥: {new_state}")  

        selected_block = data.get("selected_block")
        if selected_block:
            print(f"üìö –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –±–ª–æ–∫ '{selected_block}'")
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=course_menu(selected_block))
        else:
            print("‚ùå –û—à–∏–±–∫–∞! –ù–µ –Ω–∞–π–¥–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±–ª–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            await state.set_state(Form.choosing_block)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫:", reply_markup=main_menu())

    elif current_state == Form.choosing_course.state:
        print("üìå –ü–µ—Ä–µ—Ö–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ –∫ –≤—ã–±–æ—Ä—É –±–ª–æ–∫–∞")  
        await state.set_state(Form.choosing_block)
        new_state = await state.get_state()
        print(f"‚úÖ –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ù–∞–∑–∞–¥: {new_state}")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫:", reply_markup=main_menu())

    elif current_state == Form.choosing_block.state or current_state == "":
        print("üè† –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")  
        await state.set_state(Form.main_menu)
        new_state = await state.get_state()
        print(f"‚úÖ –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ù–∞–∑–∞–¥: {new_state}")
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ '{current_state}', —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ –≤—ã–±–æ—Ä –±–ª–æ–∫–∞.")  
        await state.set_state(Form.choosing_block)
        new_state = await state.get_state()
        print(f"‚úÖ –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ù–∞–∑–∞–¥: {new_state}")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫:", reply_markup=main_menu())


# ü§∑‚Äç‚ôÇÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def unknown_message(message: types.Message):
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –ª–∏–±–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.")

@dp.message()
async def catch_all_messages(message: types.Message):
    print(f"üì© –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: '{message.text}'") 

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await bot.delete_webhook(drop_pending_updates=True)  
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)  

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
dp.message.register(start, Command("start"))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
dp.message.register(check_code, Form.waiting_for_code)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
dp.message.register(choose_block, Form.choosing_block, F.text.in_(blocks.keys()))  # –í—ã–±–æ—Ä –±–ª–æ–∫–∞
dp.message.register(go_back, F.text == "üîô –ù–∞–∑–∞–¥")  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
dp.message.register(go_to_blocks, F.text == "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–ª–æ–∫–∞–º")  # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –±–ª–æ–∫–∞–º
dp.message.register(choose_course, Form.choosing_block, F.text.func(lambda text: any(text in courses for courses in blocks.values())))  # –í—ã–±–æ—Ä –∫—É—Ä—Å–∞
dp.message.register(send_description, F.text == "üìñ –ö—É—Ä—Å")  # –û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞

# üìã –¢–µ—Å—Ç—ã
dp.message.register(start_test, F.text == "üìù –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")  # –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
dp.message.register(handle_test_answer, Form.taking_test)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞

dp.message.register(unknown_message)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

if __name__ == "__main__":
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞


